Instructions:
  SRA rd_ptr = 68, rs1_ptr = 40, rs2 = 3, rs2_as = 1

APC advantage:
  - Main columns: 53 -> 32 (1.66x reduction)
  - Bus interactions: 24 -> 21 (1.14x reduction)
  - Constraints: 76 -> 22 (3.45x reduction)

Symbolic machine using 32 unique main columns:
  from_state__timestamp_0
  reads_aux__0__base__prev_timestamp_0
  reads_aux__0__base__timestamp_lt_aux__lower_decomp__0_0
  reads_aux__1__base__prev_timestamp_0
  reads_aux__1__base__timestamp_lt_aux__lower_decomp__0_0
  writes_aux__base__prev_timestamp_0
  writes_aux__base__timestamp_lt_aux__lower_decomp__0_0
  writes_aux__prev_data__0_0
  writes_aux__prev_data__1_0
  writes_aux__prev_data__2_0
  writes_aux__prev_data__3_0
  a__0_0
  a__1_0
  a__2_0
  a__3_0
  b__0_0
  b__1_0
  b__2_0
  b__3_0
  c__0_0
  c__1_0
  c__2_0
  c__3_0
  b_sign_0
  limb_shift_marker__0_0
  limb_shift_marker__1_0
  limb_shift_marker__2_0
  bit_shift_carry__0_0
  bit_shift_carry__1_0
  bit_shift_carry__2_0
  bit_shift_carry__3_0
  is_valid

// Bus 0 (EXECUTION_BRIDGE):
mult=is_valid * -1, args=[0, from_state__timestamp_0]
mult=is_valid * 1, args=[4, from_state__timestamp_0 + 3]

// Bus 1 (MEMORY):
mult=is_valid * -1, args=[1, 40, b__0_0, b__1_0, b__2_0, b__3_0, reads_aux__0__base__prev_timestamp_0]
mult=is_valid * 1, args=[1, 40, b__0_0, b__1_0, b__2_0, b__3_0, from_state__timestamp_0]
mult=is_valid * -1, args=[1, 3, c__0_0, c__1_0, c__2_0, c__3_0, reads_aux__1__base__prev_timestamp_0]
mult=is_valid * 1, args=[1, 3, c__0_0, c__1_0, c__2_0, c__3_0, from_state__timestamp_0 + 1]
mult=is_valid * -1, args=[1, 68, writes_aux__prev_data__0_0, writes_aux__prev_data__1_0, writes_aux__prev_data__2_0, writes_aux__prev_data__3_0, writes_aux__base__prev_timestamp_0]
mult=is_valid * 1, args=[1, 68, a__0_0, a__1_0, a__2_0, a__3_0, from_state__timestamp_0 + 2]

// Bus 3 (VARIABLE_RANGE_CHECKER):
mult=is_valid * 1, args=[503316481 * limb_shift_marker__0_0 - (62914560 * c__0_0 + 1006632960 * limb_shift_marker__1_0 + 503316480 * limb_shift_marker__2_0 + 62914561), 3]
mult=is_valid * 1, args=[bit_shift_carry__0_0, 7]
mult=is_valid * 1, args=[bit_shift_carry__1_0, 7]
mult=is_valid * 1, args=[bit_shift_carry__2_0, 7]
mult=is_valid * 1, args=[bit_shift_carry__3_0, 7]
mult=is_valid * 1, args=[reads_aux__0__base__timestamp_lt_aux__lower_decomp__0_0, 17]
mult=is_valid * 1, args=[15360 * reads_aux__0__base__prev_timestamp_0 + 15360 * reads_aux__0__base__timestamp_lt_aux__lower_decomp__0_0 + 15360 - 15360 * from_state__timestamp_0, 12]
mult=is_valid * 1, args=[reads_aux__1__base__timestamp_lt_aux__lower_decomp__0_0, 17]
mult=is_valid * 1, args=[15360 * reads_aux__1__base__prev_timestamp_0 + 15360 * reads_aux__1__base__timestamp_lt_aux__lower_decomp__0_0 - 15360 * from_state__timestamp_0, 12]
mult=is_valid * 1, args=[writes_aux__base__timestamp_lt_aux__lower_decomp__0_0, 17]
mult=is_valid * 1, args=[15360 * writes_aux__base__prev_timestamp_0 + 15360 * writes_aux__base__timestamp_lt_aux__lower_decomp__0_0 - (15360 * from_state__timestamp_0 + 15360), 12]

// Bus 6 (BITWISE_LOOKUP):
mult=is_valid * 1, args=[b__3_0, 128, b__3_0 + 128 - 256 * b_sign_0, 1]
mult=is_valid * 1, args=[a__0_0, 0, 0, 0]

// Algebraic constraints:
limb_shift_marker__0_0 * (limb_shift_marker__0_0 - 1) = 0
limb_shift_marker__0_0 * (128 * a__0_0 + bit_shift_carry__0_0 - (b__0_0 + 256 * bit_shift_carry__1_0)) = 0
limb_shift_marker__0_0 * (128 * a__1_0 + bit_shift_carry__1_0 - (b__1_0 + 256 * bit_shift_carry__2_0)) = 0
limb_shift_marker__0_0 * (128 * a__2_0 + bit_shift_carry__2_0 - (b__2_0 + 256 * bit_shift_carry__3_0)) = 0
limb_shift_marker__0_0 * (128 * a__3_0 + bit_shift_carry__3_0 - (b__3_0 + 32512 * b_sign_0)) = 0
limb_shift_marker__1_0 * (limb_shift_marker__1_0 - 1) = 0
limb_shift_marker__1_0 * (128 * a__0_0 + bit_shift_carry__1_0 - (b__1_0 + 256 * bit_shift_carry__2_0)) = 0
limb_shift_marker__1_0 * (128 * a__1_0 + bit_shift_carry__2_0 - (b__2_0 + 256 * bit_shift_carry__3_0)) = 0
limb_shift_marker__1_0 * (128 * a__2_0 + bit_shift_carry__3_0 - (b__3_0 + 32512 * b_sign_0)) = 0
limb_shift_marker__1_0 * (a__3_0 - 255 * b_sign_0) = 0
limb_shift_marker__2_0 * (limb_shift_marker__2_0 - 1) = 0
limb_shift_marker__2_0 * (128 * a__0_0 + bit_shift_carry__2_0 - (b__2_0 + 256 * bit_shift_carry__3_0)) = 0
limb_shift_marker__2_0 * (128 * a__1_0 + bit_shift_carry__3_0 - (b__3_0 + 32512 * b_sign_0)) = 0
limb_shift_marker__2_0 * (a__2_0 - 255 * b_sign_0) = 0
limb_shift_marker__2_0 * (a__3_0 - 255 * b_sign_0) = 0
(1 - (limb_shift_marker__0_0 + limb_shift_marker__1_0 + limb_shift_marker__2_0)) * (limb_shift_marker__0_0 + limb_shift_marker__1_0 + limb_shift_marker__2_0) = 0
(1 - (limb_shift_marker__0_0 + limb_shift_marker__1_0 + limb_shift_marker__2_0)) * (128 * a__0_0 + bit_shift_carry__3_0 - (b__3_0 + 32512 * b_sign_0)) = 0
(1 - (limb_shift_marker__0_0 + limb_shift_marker__1_0 + limb_shift_marker__2_0)) * (a__1_0 - 255 * b_sign_0) = 0
(1 - (limb_shift_marker__0_0 + limb_shift_marker__1_0 + limb_shift_marker__2_0)) * (a__2_0 - 255 * b_sign_0) = 0
(1 - (limb_shift_marker__0_0 + limb_shift_marker__1_0 + limb_shift_marker__2_0)) * (a__3_0 - 255 * b_sign_0) = 0
b_sign_0 * (b_sign_0 - 1) = 0
is_valid * (is_valid - 1) = 0