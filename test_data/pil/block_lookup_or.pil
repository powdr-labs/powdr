constant %N = 65536;

// ORs two 32-bit numbers, byte-by-byte.
namespace Or(%N);
	macro is_nonzero(X) {
		match X {
			0 => 0,
			_ => 1,
		}
	};
	macro is_zero(X) { 1 - is_nonzero(X) };

	col fixed RESET(i) { is_zero((i % 4) - 3) };
	col fixed FACTOR(i) { 1 << (((i + 1) % 4) * 8) };

	col fixed P_A(i) { i % 256 };
	col fixed P_B(i) { (i >> 8) % 256 };
	col fixed P_C(i) { (P_A(i) | P_B(i)) & 0xff };

	// ROW RESET  FACTOR
	//   0   0    1 << 8
	//   1   0    1 << 16
	//   2   0    1 << 24
	//   3   1    1 << 0

	col witness A_byte;
	col witness B_byte;
	col witness C_byte;

	col witness A;
	col witness B;
	col witness C;

	A' = A * (1 - RESET) + A_byte * FACTOR;
	B' = B * (1 - RESET) + B_byte * FACTOR;
	C' = C * (1 - RESET) + C_byte * FACTOR;

	{A_byte, B_byte, C_byte} in {P_A, P_B, P_C};

namespace Main(%N);
	col fixed a(i) { (i + 13) & 0xffffffff };
	col fixed b(i) { ((i + 19) * 17) & 0xffffffff };
	col witness c;
	col fixed NTH(i) { is_zero(i % 32) };

	NTH {a, b, c} in Or.RESET {Or.A, Or.B, Or.C};

