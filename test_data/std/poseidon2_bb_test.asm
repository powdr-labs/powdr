use std::machines::hash::poseidon2_bb::Poseidon2BB;
use std::machines::range::Byte2;
use std::machines::memory_bb::Memory;
use std::machines::split::ByteCompare;
use std::machines::split::split_bb::SplitBB;

machine Main with degree: 65536 {
    reg pc[@pc];
    reg X1[<=];
    reg X2[<=];
    reg ADDR1[<=];
    reg ADDR2[<=];

    ByteCompare byte_compare;
    SplitBB split(byte_compare);

    // Increase the time step by 2 in each row, so that the poseidon machine
    // can read in the given time step and write in the next time step.
    col fixed STEP(i) { 2 * i };
    Byte2 byte2;
    Memory memory(byte2);
    instr mstore_le ADDR1, X1, X2 ->
        link ~> memory.mstore(ADDR1, STEP, X1, X2);

    Poseidon2BB poseidon2(memory, split);
    instr poseidon2 ADDR1, ADDR2 -> link ~> poseidon2.poseidon_permutation(ADDR1, ADDR2, STEP);

    col witness val_low, val_high;
    instr assert_eq ADDR1, X1 ->
        link ~> (val_high, val_low) = memory.mload(ADDR1, STEP)
    {
        val_low + 2**16 * val_high = X1
    }

    function main {

        // Test vectors generated by gen_poseidon_bb_consts

        // All zeros:
        mstore_le 0, 0, 0;
        mstore_le 4, 0, 0;
        mstore_le 8, 0, 0;
        mstore_le 12, 0, 0;
        mstore_le 16, 0, 0;
        mstore_le 20, 0, 0;
        mstore_le 24, 0, 0;
        mstore_le 28, 0, 0;
        mstore_le 32, 0, 0;
        mstore_le 36, 0, 0;
        mstore_le 40, 0, 0;
        mstore_le 44, 0, 0;
        mstore_le 48, 0, 0;
        mstore_le 52, 0, 0;
        mstore_le 56, 0, 0;
        mstore_le 60, 0, 0;

        poseidon2 0, 0;

        assert_eq 0, 248801356;
        assert_eq 4, 1685558007;
        assert_eq 8, 720497725;
        assert_eq 12, 956335022;
        assert_eq 16, 321739953;
        assert_eq 20, 208179186;
        assert_eq 24, 1631289420;
        assert_eq 28, 1989448950;

        // All ones:
        mstore_le 0, 0, 1;
        mstore_le 4, 0, 1;
        mstore_le 8, 0, 1;
        mstore_le 12, 0, 1;
        mstore_le 16, 0, 1;
        mstore_le 20, 0, 1;
        mstore_le 24, 0, 1;
        mstore_le 28, 0, 1;
        mstore_le 32, 0, 1;
        mstore_le 36, 0, 1;
        mstore_le 40, 0, 1;
        mstore_le 44, 0, 1;
        mstore_le 48, 0, 1;
        mstore_le 52, 0, 1;
        mstore_le 56, 0, 1;
        mstore_le 60, 0, 1;

        poseidon2 0, 0;

        assert_eq 0, 825643358;
        assert_eq 4, 1347291127;
        assert_eq 8, 575415694;
        assert_eq 12, 739008160;
        assert_eq 16, 1041909928;
        assert_eq 20, 1744130887;
        assert_eq 24, 1806932542;
        assert_eq 28, 1046987717;

        // All elements are -1 (in BabyBear, 0x78000000)
        mstore_le 0, 30720, 0;
        mstore_le 4, 30720, 0;
        mstore_le 8, 30720, 0;
        mstore_le 12, 30720, 0;
        mstore_le 16, 30720, 0;
        mstore_le 20, 30720, 0;
        mstore_le 24, 30720, 0;
        mstore_le 28, 30720, 0;
        mstore_le 32, 30720, 0;
        mstore_le 36, 30720, 0;
        mstore_le 40, 30720, 0;
        mstore_le 44, 30720, 0;
        mstore_le 48, 30720, 0;
        mstore_le 52, 30720, 0;
        mstore_le 56, 30720, 0;
        mstore_le 60, 30720, 0;

        poseidon2 0, 0;

        assert_eq 0, 1841881823;
        assert_eq 4, 149754252;
        assert_eq 8, 1077798821;
        assert_eq 12, 1282588023;
        assert_eq 16, 761789559;
        assert_eq 20, 703958163;
        assert_eq 24, 332297247;
        assert_eq 28, 1325149063;

        // Some other values (ported from poseidon_gl test):
        mstore_le 0, 14, 6474;
        mstore_le 4, 3225, 31229;
        mstore_le 8, 13499, 22633;
        mstore_le 12, 1, 47334;
        mstore_le 16, 26147, 51257;
        mstore_le 20, 14081, 12102;
        mstore_le 24, 25381, 5145;
        mstore_le 28, 0, 2087;
        mstore_le 32, 0, 0;
        mstore_le 36, 0, 0;
        mstore_le 40, 0, 0;
        mstore_le 44, 0, 0;
        mstore_le 48, 0, 0;
        mstore_le 52, 0, 0;
        mstore_le 56, 0, 0;
        mstore_le 60, 0, 0;

        poseidon2 0, 0;

        assert_eq 0, 117705446;
        assert_eq 4, 1986873944;
        assert_eq 8, 1758310750;
        assert_eq 12, 562581070;
        assert_eq 16, 1115248905;
        assert_eq 20, 1754580351;
        assert_eq 24, 757697741;
        assert_eq 28, 971587237;

        // Repeat the first test, but be fancy with the memory pointers being passed:
        mstore_le 100, 0, 0;
        mstore_le 104, 0, 0;
        mstore_le 108, 0, 0;
        mstore_le 112, 0, 0;
        mstore_le 116, 0, 0;
        mstore_le 120, 0, 0;
        mstore_le 124, 0, 0;
        mstore_le 128, 0, 0;
        mstore_le 132, 0, 0;
        mstore_le 136, 0, 0;
        mstore_le 140, 0, 0;
        mstore_le 144, 0, 0;
        mstore_le 148, 0, 0;
        mstore_le 152, 0, 0;
        mstore_le 156, 0, 0;
        mstore_le 160, 0, 0;


        // This will read bytes [100, 164) and write the result to bytes [104, 136)
        poseidon2 100, 104;

        assert_eq 104, 248801356;
        assert_eq 108, 1685558007;
        assert_eq 112, 720497725;
        assert_eq 116, 956335022;
        assert_eq 120, 321739953;
        assert_eq 124, 208179186;
        assert_eq 128, 1631289420;
        assert_eq 132, 1989448950;

        return;
    }
}
