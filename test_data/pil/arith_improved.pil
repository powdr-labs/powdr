/*
    Equations:

    EQ0: A(x1) * B(y1) + C(x2) = D (y2) * 2 ** 256 + op (y3)

    EQ1: s * x2 - s * x1 - y2 + y1 + (q0 * p)   lambda - ADD
    EQ2: 2 * s * y1 - 3 * x1 * x1 + (q0 * p)    lambda - DBL
    EQ3: s * s - x1 - x2 - x3 + (q1 * p)        x3
    EQ4: s * x1 - s * x3 - y1 - y3 + (q2 * p)   y3

*/

let N = 2**16;

let BYTE2 = |i| i & 0xffff;

namespace std::field(N);
    let modulus = || modulus();

namespace Arith(N);
    let fold = |length, f, initial, folder| match length {
        0 => initial,
        _ => folder(fold(length - 1, f, initial, folder), f(length - 1))
    };

    /// creates the array [f(0), f(1), ..., f(length - 1)]
    let make_array = |length, f| fold(length, f, [], |acc, e| acc + [e]);

    /// returns f(0) + f(1) + ... + f(length - 1)
    let sum = |length, f| fold(length, f, 0, |acc, e| acc + e);

    // TODO the weird syntax is needed so that this is not classified as a constant column
    let force_boolean = (|| |x| x * (1 - x) == 0)();

    let clock = |j, row| row % 32 == j;
    // Arrays of fixed columns are not supported yet.
    // These need an explicit lambda, otherwise they are not recognized as fixed columns.
    // The type system will handle that in the future.
    let CLK32_0 = |row| clock(0, row);
    let CLK32_1 = |row| clock(1, row);
    let CLK32_2 = |row| clock(2, row);
    let CLK32_3 = |row| clock(3, row);
    let CLK32_4 = |row| clock(4, row);
    let CLK32_5 = |row| clock(5, row);
    let CLK32_6 = |row| clock(6, row);
    let CLK32_7 = |row| clock(7, row);
    let CLK32_8 = |row| clock(8, row);
    let CLK32_9 = |row| clock(9, row);
    let CLK32_10 = |row| clock(10, row);
    let CLK32_11 = |row| clock(11, row);
    let CLK32_12 = |row| clock(12, row);
    let CLK32_13 = |row| clock(13, row);
    let CLK32_14 = |row| clock(14, row);
    let CLK32_15 = |row| clock(15, row);
    let CLK32_16 = |row| clock(16, row);
    let CLK32_17 = |row| clock(17, row);
    let CLK32_18 = |row| clock(18, row);
    let CLK32_19 = |row| clock(19, row);
    let CLK32_20 = |row| clock(20, row);
    let CLK32_21 = |row| clock(21, row);
    let CLK32_22 = |row| clock(22, row);
    let CLK32_23 = |row| clock(23, row);
    let CLK32_24 = |row| clock(24, row);
    let CLK32_25 = |row| clock(25, row);
    let CLK32_26 = |row| clock(26, row);
    let CLK32_27 = |row| clock(27, row);
    let CLK32_28 = |row| clock(28, row);
    let CLK32_29 = |row| clock(29, row);
    let CLK32_30 = |row| clock(30, row);
    let CLK32_31 = |row| clock(31, row);
    let CLK32 = [
        CLK32_0,
        CLK32_1,
        CLK32_2,
        CLK32_3,
        CLK32_4,
        CLK32_5,
        CLK32_6,
        CLK32_7,
        CLK32_8,
        CLK32_9,
        CLK32_10,
        CLK32_11,
        CLK32_12,
        CLK32_13,
        CLK32_14,
        CLK32_15,
        CLK32_16,
        CLK32_17,
        CLK32_18,
        CLK32_19,
        CLK32_20,
        CLK32_21,
        CLK32_22,
        CLK32_23,
        CLK32_24,
        CLK32_25,
        CLK32_26,
        CLK32_27,
        CLK32_28,
        CLK32_29,
        CLK32_30,
        CLK32_31
    ];

    pol constant BYTE2_BIT19(r) { r % (2**19 + 2**16) };
	// TODO this is way too large for our tests.
    pol constant SEL_BYTE2_BIT19(r) { r >= 2**16 };
	// TODO not sure how that constant is defined
    // pol constant GL_SIGNED_22BITS;

    pol commit x1[16];
    pol commit y1[16];
    pol commit x2[16];
    pol commit y2[16];
    pol commit x3[16];
    pol commit y3[16];

    pol commit s[16];
    pol commit q0[16];
    pol commit q1[16];
    pol commit q2[16];

    pol commit resultEq0;
    pol commit resultEq1;
    pol commit resultEq2;
    force_boolean(resultEq0);
    force_boolean(resultEq1);
    force_boolean(resultEq2);

    /****
    *
    * LATCH POLS: x1,y1,x2,y2,x3,y3,s,q0,q1,q2
    *
    *****/


    // TODO This uses "==", although I would prefer a different symbol.
    // We could fix it by introducing expressions that also allow constraints.
    // That way we could even support functions returning lookups.

    // x can only change between two blocks of 32 rows.
    // TODO the weird syntax is needed so that this is not classified as a fixed column.
    let fixed_inside_32_block = (|| |x| (x - x') * (1 - CLK32[31]) == 0)();

    make_array(16, |i| fixed_inside_32_block(x1[i]));
    make_array(16, |i| fixed_inside_32_block(y1[i]));
    make_array(16, |i| fixed_inside_32_block(x2[i]));
    make_array(16, |i| fixed_inside_32_block(y2[i]));
    make_array(16, |i| fixed_inside_32_block(x3[i]));
    make_array(16, |i| fixed_inside_32_block(y3[i]));
    make_array(16, |i| fixed_inside_32_block(s[i]));
    make_array(16, |i| fixed_inside_32_block(q0[i]));
    make_array(16, |i| fixed_inside_32_block(q1[i]));
    make_array(16, |i| fixed_inside_32_block(q2[i]));


    /****
    *
    * RANGE CHECK x1,y1,x2,y2,s,q0,q1,q2
    *
    *****/

    sum(16, |i| x1[i] * CLK32[i]) + sum(16, |i| y1[i] * CLK32[16 + i]) in BYTE2;
    sum(16, |i| x2[i] * CLK32[i]) + sum(16, |i| y2[i] * CLK32[16 + i]) in BYTE2;
    sum(16, |i| x3[i] * CLK32[i]) + sum(16, |i| y3[i] * CLK32[16 + i]) in BYTE2;
    sum(16, |i| s[i] * CLK32[i]) + sum(15, |i| q0[i] * CLK32[16 + i]) + q1[0] * CLK32[31] in BYTE2;

	// TODO these lookups require the degree to be at least 2**16, probably more to be correct.
    // {
	// 	CLK32[29] + CLK32[30] + CLK32[31],
	// 	sum(14, |i| q1[i + 1] * CLK32[i]) +
	// 	sum(15, |i| q2[i] * CLK32[i + 14]) +
	//     q0[15]*CLK32[29] + q1[15]*CLK32[30] + q2[15]*CLK32[31]
	// } in {SEL_BYTE2_BIT19, BYTE2_BIT19};

    /*******
    *
    * EQ0: A(x1) * B(y1) + C(x2) = D (y2) * 2 ** 256 + op (y3)
	*        x1 * y1 + x2 - y2 * 2**256 - y3 = 0
    *
    *******/

	/// returns a(0) * b(0) + ... + a(n - 1) * b(n - 1)
	let dot_prod = |n, a, b| sum(n, |i| a(i) * b(i));
	/// returns |n| a(0) * b(n) + ... + a(n) * b(0)
	let product = |a, b| |n| dot_prod(n + 1, a, |i| b(n - i));
	/// Converts array to function, extended by zeros.
	let array_as_fun = |arr, len| |i| match i < len {
		1 => arr[i],
		_ => 0,
	};
	let prepend_zeros = |arr, amount| |i| match i < amount { 1 => 0, _ => arr(i - amount) };

	let x1f = array_as_fun(x1, 16);
	let y1f = array_as_fun(y1, 16);
	let x2f = array_as_fun(x2, 16);
	let y2f = array_as_fun(y2, 16);
	let x3f = array_as_fun(x2, 16);
	let y3f = array_as_fun(y3, 16);
	let sf = array_as_fun(s, 16);
	let q0f = array_as_fun(q0, 16);
	let q1f = array_as_fun(q1, 16);
	let q2f = array_as_fun(q2, 16);

	// Defined for arguments from 0 to 31 (inclusive)
	let eq0 = (|| |nr|
		product(x1f, y1f)(nr)
		+ x2f(nr)
		- prepend_zeros(y2f, 16)(nr)
		- y3f(nr)
	)();


    /*******
    *
    * EQ1: s * x2 - s * x1 - y2 + y1 + (q0 * p)
    *
    *******/

	// 0xffffffffffffffffffffffffffffffffffffffffffffffffffff fffe ffff fc2f
	let p = (|| |nr| match nr >= 16 {
		1 => 0,
		_ => match nr {
			0 => 0xfc2f,
			1 => 0xffff,
			2 => 0xfffe,
			_ => 0xffff
		}
	})();

	// I have no idea where the "- 4 * prepend_zeros(p, 16)" comes from, but it was in the original constraints.
	let product_with_p = (|| |x| |nr| product(p, x)(nr) - 4 * prepend_zeros(p, 16)(nr))();

	let eq1 = (|| |nr| std::field::modulus() + product(sf, x2f)(nr) - product(sf, x1f)(nr) - y2f(nr) + y1f(nr) + product_with_p(q0f)(nr))();

    /*******
    *
    * EQ2:  2 * s * y1 - 3 * x1 * x1 + (q0 * p)
    *
    *******/

	let eq2 = (|| |nr| std::field::modulus() + 2 * product(sf, y1f)(nr) - 3 * product(x1f, x1f)(nr) + product_with_p(q0f)(nr))();

    /*******
    *
    * EQ3:  s * s - x1 - x2 - x3 + (q1 * p)
    *
    *******/

	let eq3 = (|| |nr| std::field::modulus() + product(sf, sf)(nr) - x1f(nr) - x2f(nr) - x3f(nr) + product_with_p(q1f)(nr))();


    /*******
    *
    * EQ4:  s * x1 - s * x3 - y1 - y3 + (q2 * p)
    *
    *******/

	let eq4 = (|| |nr| std::field::modulus() + product(sf, x1f)(nr) - product(sf, x3f)(nr) - y1f(nr) - y3f(nr) + product_with_p(q2f)(nr))();

    pol commit selEq[4];

	make_array(4, |i| fixed_inside_32_block(selEq[i]));

	make_array(4, |i| force_boolean(selEq[i]));

    pol commit carry[3];

    carry[0] * CLK32[0] = 0;
    carry[1] * CLK32[0] = 0;
    carry[2] * CLK32[0] = 0;

	// TODO not sure what that constant is.
    // carry[0] in GL_SIGNED_22BITS;
    // carry[1] in GL_SIGNED_22BITS;
    // carry[2] in GL_SIGNED_22BITS;

    selEq[0] * (sum(32, |i| eq0(i) * CLK32[i]) + carry[0]) = selEq[0] * carry[0]' * 2**16;
    selEq[1] * (sum(32, |i| eq1(i) * CLK32[i]) + carry[0]) = selEq[1] * carry[0]' * 2**16;
    selEq[2] * (sum(32, |i| eq2(i) * CLK32[i]) + carry[0]) = selEq[2] * carry[0]' * 2**16;
    selEq[3] * (sum(32, |i| eq3(i) * CLK32[i]) + carry[1]) = selEq[3] * carry[1]' * 2**16;
    selEq[3] * (sum(32, |i| eq4(i) * CLK32[i]) + carry[2]) = selEq[3] * carry[2]' * 2**16;