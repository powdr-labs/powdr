use std::str::FromStr;
use std::collections::BTreeSet;
use powdr_ast::parsed::{*, asm::*, types::*};
use powdr_number::{BigInt, BigUint};
use crate::{ParserContext, unescape_string};
use powdr_parser_util::Error;

grammar(ctx: &ParserContext);

extern {
    type Error = Error;
}

match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _,
}

pub PILFile: PILFile = {
    <PilStatement*> => PILFile(<>)
};

pub ASMModule: ASMModule = {
    (<ModuleStatement>)* => ASMModule { statements: <> }
};

ModuleStatement: ModuleStatement = {
    <MachineDefinition> => ModuleStatement::SymbolDefinition(<>),
    <LetStatementAtModuleLevel> => ModuleStatement::SymbolDefinition(<>),
    <EnumDeclaration> => ModuleStatement::SymbolDefinition(SymbolDefinition {
            name: <>.name.clone(),
            value: SymbolValue::TypeDeclaration(<>),
        }),
    <TraitImplementation> => ModuleStatement::TraitImplementation(<>),
    <TraitDeclaration> => ModuleStatement::SymbolDefinition(SymbolDefinition {
            name: <>.name.clone(),
            value: SymbolValue::TraitDeclaration(<>),
        }),
    <Import> => ModuleStatement::SymbolDefinition(<>),
    <ModuleDefinition> => ModuleStatement::SymbolDefinition(<>),
}

ModuleDefinition: SymbolDefinition = {
    "mod" <name:Identifier> ";" => SymbolDefinition { name: name.clone(), value: Module::External(name).into() }, 
    "mod" <name:Identifier> "{" <module:ASMModule> "}" => SymbolDefinition { name, value: Module::Local(module).into() }
}

Import: SymbolDefinition = {
    "use" <path:SymbolPath> <name:( "as" <Identifier> )?> ";" =>
        SymbolDefinition {
            name: name.unwrap_or(path.name().clone().try_into().unwrap()),
            value: Import {path}.into()
        }
}

pub SymbolPath: SymbolPath = {
    <abs:"::"?> <parts:( <Part> "::" )*> <end:Part>  => {
        SymbolPath::from_parts([
            abs.map(|_| vec![Part::Named(String::new())]).unwrap_or_default(),
            parts,
            vec![end],
        ].concat())
    },
}

Part: Part = {
    "super" => Part::Super,
    <name:Identifier> => Part::Named(name),
}

// Same as SymbolPath plus we allow "::<...>" at the end.
GenericSymbolPath: (SymbolPath, Option<Vec<Type<Expression>>>) = {
    // If we "inline" SymbolPath here, we get an ambiguity error.
    <abs:"::"?> <parts:( <Part> "::" )*> <end:Part> <types:("::" "<" <TypeTermList<Expression>> ">")?>  => (
        SymbolPath::from_parts([
            abs.map(|_| vec![Part::Named(String::new())]).unwrap_or_default(),
            parts,
            vec![end],
        ].concat()),
        types
    ),
}

/// Same as SymbolPath except that we do not allow 'int' and 'fe' to be parsed as identifiers.
TypeSymbolPath: SymbolPath = {
    <abs:"::"?> <parts:( <TypeSymbolPathPart> "::" )*> <end:TypeSymbolPathPart>  => {
        SymbolPath::from_parts([
            abs.map(|_| vec![Part::Named(String::new())]).unwrap_or_default(),
            parts,
            vec![end],
        ].concat())
    },
}

TypeSymbolPathPart: Part = {
    "super" => Part::Super,
    <name:NonSpecialIdentifier> => Part::Named(name),
}

LetStatementAtModuleLevel: SymbolDefinition = {
    "let" <name:GenericTypedName>  "=" <value:Expression> ";" =>
        SymbolDefinition {
            name: name.0,
            value: SymbolValue::Expression(TypedExpression{ e: value, type_scheme: name.1 })
        }
}

// ---------------------------- PIL part -----------------------------

pub PilStatement = {
    Include,
    Namespace,
    LetStatement,
    PolynomialDefinition,
    PublicDeclaration,
    PolynomialConstantDeclaration,
    PolynomialConstantDefinition,
    PolynomialCommitDeclaration,
    <start:@L> <decl:EnumDeclaration> <end:@R> => PilStatement::EnumDeclaration(ctx.source_ref(start, end), decl),
    <start:@L> <impl_:TraitImplementation> <end:@R> => PilStatement::TraitImplementation(ctx.source_ref(start, end), impl_),
    <start:@L> <decl:TraitDeclaration> <end:@R> => PilStatement::TraitDeclaration(ctx.source_ref(start, end), decl),
    PlookupIdentityStatement,
    PermutationIdentityStatement,
    ConnectIdentityStatement,
    ExpressionStatement,
};

Include: PilStatement = {
    <start:@L> "include" <file:StringLiteral> <end:@R> ";" => PilStatement::Include(ctx.source_ref(start, end), file)
};

Namespace: PilStatement = {
    <start:@L> "namespace" <name:(SymbolPath)?> <pol_degree:("(" <Expression> ")")?> <end:@R> ";"
        => PilStatement::Namespace(ctx.source_ref(start, end), name.unwrap_or_default(), pol_degree)
}

LetStatement: PilStatement = {
    <start:@L> "let" <name:GenericTypedName> <expr:( "=" <Expression> )?> <end:@R> ";" =>
        PilStatement::LetStatement(ctx.source_ref(start, end), name.0, name.1, expr)
}

PolynomialDefinition: PilStatement = {
    <start:@L> PolCol <id:Identifier> "=" <expr:Expression> <end:@R> ";" => PilStatement::PolynomialDefinition(ctx.source_ref(start, end), id, expr)
}

PublicDeclaration: PilStatement = {
    <start:@L> "public" <id:Identifier> "="
        <poly:NamespacedPolynomialReference>
        <expr1:("[" <Expression> "]")?>
        "(" <expr2:Expression> ")" <end:@R> ";" => PilStatement::PublicDeclaration(ctx.source_ref(start, end), id, poly, expr1, expr2)
}

PolynomialConstantDeclaration: PilStatement = {
    <start:@L> PolCol ConstantFixed <list:PolynomialNameList> <end:@R> ";" => PilStatement::PolynomialConstantDeclaration(ctx.source_ref(start, end), list)
}

PolynomialConstantDefinition: PilStatement = {
    <start:@L> PolCol ConstantFixed <id:Identifier> <def:FunctionDefinition> <end:@R> ";"
        => PilStatement::PolynomialConstantDefinition(ctx.source_ref(start, end), id, def)
}

FunctionDefinition: FunctionDefinition = {
    <start:@L> "(" <params:ParameterList> ")" <body:BlockExpression> <end:@R>
        => FunctionDefinition::Expression(Expression::LambdaExpression(ctx.source_ref(start, end), LambdaExpression{
            kind: FunctionKind::Pure,
            params,
            body,
            outer_var_references: Default::default()
        })),
    <start:@L> "=" <array:ArrayLiteralExpression> <end:@R> => FunctionDefinition::Array(array),
}

ParameterList: Vec<Pattern> = {
    PatternList
}

ArrayLiteralExpression: ArrayExpression = {
    <ArrayLiteralExpression> "+" <ArrayLiteralTerm> => ArrayExpression::concat(<>),
    ArrayLiteralTerm,
}

ArrayLiteralTerm: ArrayExpression = {
    "[" <ExpressionList> "]" => ArrayExpression::value(<>),
    "[" <ExpressionList> "]" "*" => ArrayExpression::repeated_value(<>),
}

PolynomialCommitDeclaration: PilStatement = {
    <start:@L> PolCol CommitWitness <stage:Stage?> <list:PolynomialNameList> <end:@R> ";" => PilStatement::PolynomialCommitDeclaration(ctx.source_ref(start, end), stage, list, None),
    <start:@L> PolCol CommitWitness <stage:Stage?> <name:PolynomialName> "(" <params:ParameterList> ")" "query" <body:BoxedExpression> <end:@R> ";"
     => PilStatement::PolynomialCommitDeclaration(
        ctx.source_ref(start, end),
        stage,
        vec![name],
        Some(FunctionDefinition::Expression(Expression::LambdaExpression(ctx.source_ref(start, end), LambdaExpression{
            kind: FunctionKind::Query,
            params,
            body,
            outer_var_references: Default::default()
        })))
    )
}

Stage: u32 = {
    "stage" "(" <Number> ")" => u32::try_from(<>).unwrap()
}

PolynomialNameList: Vec<PolynomialName> = {
    <mut list:( <PolynomialName> "," )*> <end:PolynomialName>  => { list.push(end); list }
}

PolynomialName: PolynomialName = {
    <name:Identifier> <array_size:( "[" <Expression> "]" )?> => PolynomialName{<>}
}

PlookupIdentityStatement: PilStatement = {
    <PlookupIdentity> ";"
}

PlookupIdentity: PilStatement = {
    <start:@L> <se1:SelectedExpressions> "in" <se2:SelectedExpressions> <end:@R> => PilStatement::PlookupIdentity(ctx.source_ref(start, end), se1, se2)
}

SelectedExpressions: SelectedExpressions<Expression> = {
    <selector:(<Expression> "$")?> <expr:Expression> => SelectedExpressions{selector, expressions: Box::new(expr)},
}

PermutationIdentityStatement: PilStatement = {
    <PermutationIdentity> ";"
}

PermutationIdentity: PilStatement = {
    <start:@L> <se1:SelectedExpressions> "is" <se2:SelectedExpressions> <end:@R> => PilStatement::PermutationIdentity(ctx.source_ref(start, end), se1, se2)
}

ConnectIdentityStatement: PilStatement = {
    <ConnectIdentity> ";"
}

ConnectIdentity: PilStatement = {
    <start:@L> "[" <list1:ExpressionList> "]" "connect" "[" <list2:ExpressionList> "]" <end:@R> => PilStatement::ConnectIdentity(ctx.source_ref(start, end), list1, list2)
}

ExpressionStatement: PilStatement = {
    <ExpressionStatementWithoutSemicolon> ";"
}

ExpressionStatementWithoutSemicolon: PilStatement = {
    <start:@L> <expr:Expression> <end:@R> => PilStatement::Expression(ctx.source_ref(start, end), expr)
}

PolCol = {
    "pol", "col"
} 

CommitWitness = {
    "commit", "witness"
} 

ConstantFixed = {
    "constant", "fixed"
}

GenericTypedName: (String, Option<TypeScheme<Expression>>) = {
    <name:Identifier> => (name, None),
    <vars:("<" <TypeVarBounds> ">")?> <name:Identifier> <ty:(":" <Type<Expression>>)> =>
        (name, Some(TypeScheme{ vars: vars.unwrap_or_default(), ty }))
}


// ---------------------------- ASM part -----------------------------

MachineDefinition: SymbolDefinition = {
    "machine" <name:Identifier> <params:MachineParams> <properties:("with" <MachineProperties>)?> "{" <statements:(MachineStatement)*> "}" => SymbolDefinition { name, value: Machine { params, properties: properties.unwrap_or_default(), statements}.into() },
}

MachineProperties: MachineProperties = {
    <start:@L> <mut list:( <MachineProperty> "," )*> <last:MachineProperty> ","? <end:@R> =>? {
        list.push(last);
        Ok(MachineProperties::try_from_prop_list(ctx.source_ref(start, end), list)?)
    }
}

MachineProperty: (String, Expression) = {
    <name:Identifier> ":" <value:Expression> => (name, value),
}

MachineParams: MachineParams = {
    => MachineParams::default(),
    "(" ")" => MachineParams::default(),
    <start:@L> "(" <mut list:( <Param> "," )*> <last:Param> ","? ")" <end:@R> =>? {
        list.push(last);
        Ok(MachineParams::try_from_params(ctx.source_ref(start, end), list)?)
    }
}

MachineStatement: MachineStatement = {
    Submachine,
    RegisterDeclaration,
    InstructionDeclaration,
    LinkDeclarationStatement,
    PilStatementInMachine,
    FunctionDeclaration,
    OperationDeclaration,
}

PilStatementInMachine: MachineStatement = {
    <start:@L> <stmt:PilStatement> <end:@R> => MachineStatement::Pil(ctx.source_ref(start, end), stmt)
}

Submachine: MachineStatement = {
    <start:@L> <path:SymbolPath> <id:Identifier> <args:("(" <ExpressionList> ")")?> <end:@R> ";" => MachineStatement::Submachine(ctx.source_ref(start, end), path, id, args.unwrap_or_default()),
}

pub RegisterDeclaration: MachineStatement = {
    // TODO default update
    <start:@L> "reg" <id:Identifier> <flag:( "[" <RegisterFlag> "]" )?> <end:@R> ";" => MachineStatement::RegisterDeclaration(ctx.source_ref(start, end), id, flag)

}

RegisterFlag: RegisterFlag = {
    "@pc" => RegisterFlag::IsPC,
    "<=" => RegisterFlag::IsAssignment,
    "@r" => RegisterFlag::IsReadOnly,
}

pub InstructionDeclaration: MachineStatement = {
    <start:@L> "instr" <id:Identifier> <instr:Instruction> <end:@R> => MachineStatement::InstructionDeclaration(ctx.source_ref(start, end), id, instr)
}

pub Instruction: Instruction = {
    <params:Params> <links:(<LinkDeclaration>)*> <body:InstructionBody> => Instruction { params, body, links },
    <params:Params> <links:(<LinkDeclaration>)+> ";" => Instruction { params, body: InstructionBody(vec![]), links },
}

pub LinkDeclarationStatement: MachineStatement = {
    <start:@L> <link:LinkDeclaration> <end:@R> ";" => MachineStatement::LinkDeclaration(ctx.source_ref(start, end), link),
}

pub LinkDeclaration: LinkDeclaration = {
    "link" <flag:LinkFlag> "=>" <link:Expression> =>? Ok(LinkDeclaration { flag, link: link.try_into()?, is_permutation: false, }),
    "link" <flag:LinkFlag> "~>" <link:Expression> =>? Ok(LinkDeclaration { flag, link: link.try_into()?, is_permutation: true, }),
}

pub LinkFlag: Expression = {
    "if" <Expression>,
    => 1.into(),
}

pub InstructionBody: InstructionBody = {
    "{}" => InstructionBody(vec![]),
    "{" <InstructionBodyElements> "}" => InstructionBody(<>),
}

InstructionBodyElements: Vec<PilStatement> = {
    <mut list:( <InstructionBodyElement> "," )*> <end:InstructionBodyElement>  => { list.push(end); list },
    => vec![]
}

InstructionBodyElement: PilStatement = {
    PlookupIdentity,
    PermutationIdentity,
    ExpressionStatementWithoutSemicolon,
}

Params: Params<Param> = {
    <_input: ParamList> "->" <output: ParamList> => Params::new(_input, output),
    // we can ommit the arrow if there are no outputs
    <_input: ParamList> => Params::new(_input, vec![])
}

ParamList: Vec<Param> = {
    => vec![],
    <mut list:( <Param> "," )*> <end:Param>  => { list.push(end); list }
}

Param: Param = {
    <name: Identifier> <index:("[" <Number> "]")?> <ty:(":" <SymbolPath>)?> => Param{<>}
}

FunctionDeclaration: MachineStatement = {
    <start:@L> "function" <id:Identifier> <params:Params> "{" <stmt:(<FunctionStatement>)*> "}" <end:@R> => MachineStatement::FunctionDeclaration(ctx.source_ref(start, end), id, params, stmt)
}

OperationDeclaration: MachineStatement = {
    <start:@L> "operation" <id:Identifier> <op:OperationId> <params:Params> <end:@R> ";" => MachineStatement::OperationDeclaration(ctx.source_ref(start, end), id, op, params)
}

OperationId: OperationId = {
    "<" <id:Number> ">" => OperationId { id: Some(id.into()) },
    => OperationId { id: None }
}

pub FunctionStatement: FunctionStatement = {
    AssignmentStatement,
    LabelStatement,
    DebugDirectiveStatement,
    ReturnStatement,
    InstructionStatement,
}

AssignmentStatement: FunctionStatement = {
    <start:@L> <ids:IdentifierList> <op:AssignOperator> <expr:BoxedExpression> <end:@R> ";" => FunctionStatement::Assignment(ctx.source_ref(start, end), ids, op, expr)
}

IdentifierList: Vec<String> = {
    <mut list:( <Identifier> "," )*> <end:Identifier>  => { list.push(end); list },
    => vec![]
}

AssignOperator: Option<Vec<AssignmentRegister>> = {
    "<==" => None,
    "<=" <AssignmentRegisterList> "=" => Some(<>)
}

AssignmentRegisterList: Vec<AssignmentRegister> = {
    <mut list:( <AssignmentRegister> "," )*> <end:AssignmentRegister>  => { list.push(end); list },
    => vec![]
}

AssignmentRegister: AssignmentRegister = {
    <Identifier> => AssignmentRegister::Register(<>),
    "_" => AssignmentRegister::Wildcard,
}

ReturnStatement: FunctionStatement = {
    <start:@L> "return" <list:ExpressionList> <end:@R> ";" => FunctionStatement::Return(ctx.source_ref(start, end), list)
}

InstructionStatement: FunctionStatement = {
    <start:@L> <id:Identifier> <list:ExpressionList> <end:@R> ";" => FunctionStatement::Instruction(ctx.source_ref(start, end), id, list)
}

DebugDirectiveStatement: FunctionStatement = {
    <start:@L> ".debug" "file" <n:UnsignedInteger> <d:StringLiteral> <f:StringLiteral> <end:@R> ";"
        => FunctionStatement::DebugDirective(ctx.source_ref(start, end), DebugDirective::File(n.try_into().unwrap(), d, f)),
    <start:@L> ".debug" "loc" <f:UnsignedInteger> <line:UnsignedInteger> <col:UnsignedInteger> <end:@R> ";"
        => FunctionStatement::DebugDirective(ctx.source_ref(start, end), DebugDirective::Loc(f.try_into().unwrap(), line.try_into().unwrap(), col.try_into().unwrap())),
    <start:@L> ".debug" "insn" <insn:StringLiteral> <end:@R> ";"
        => FunctionStatement::DebugDirective(ctx.source_ref(start, end), DebugDirective::OriginalInstruction(insn)),
}

LabelStatement: FunctionStatement = {
    <start:@L> <id:Identifier> ":" <end:@R> => FunctionStatement::Label(ctx.source_ref(start, end), id)
}

// ---------------------------- Expressions -----------------------------

ExpressionList: Vec<Expression> = {
    => vec![],
    <mut list:( <Expression> "," )*> <end:Expression>  => { list.push(end); list }
}

Expression: Expression = {
    BoxedExpression => *<>,
}

BoxedExpression: Box<Expression> = {
    LambdaExpression,
}

LambdaExpression: Box<Expression> = {
    <start:@L> <kind:FunctionKind> "||" <body:BoxedExpression> <end:@R>
        => ctx.to_expr_with_source_ref(LambdaExpression{kind, params: vec![], body, outer_var_references: Default::default()}, start, end),
    <start:@L> <kind:FunctionKind> "|" <params:ParameterList> "|" <body:BoxedExpression> <end:@R>
        => ctx.to_expr_with_source_ref(LambdaExpression{kind, params, body, outer_var_references: Default::default()}, start, end),
    LogicalOr
}

FunctionKind: FunctionKind = {
    => FunctionKind::Pure,
    "query" => FunctionKind::Query,
    "constr" => FunctionKind::Constr,
}

LogicalOr: Box<Expression> = {
    <start:@L> <left:LogicalOr> "||" <right:LogicalAnd> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op: BinaryOperator::LogicalOr, right }, start, end),
    LogicalAnd,
}

LogicalAnd: Box<Expression> = {
    <start:@L> <left:LogicalAnd> "&&" <right:Comparison> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op: BinaryOperator::LogicalAnd, right }, start, end),
    Comparison,
}

Comparison: Box<Expression> = {
    <start:@L> <left:BinaryOr> <op:ComparisonOp> <right:BinaryOr> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op: op, right }, start, end),
    BinaryOr
}

ComparisonOp: BinaryOperator = {
    "<" => BinaryOperator::Less,
    "<=" => BinaryOperator::LessEqual,
    "==" => BinaryOperator::Equal,
    "=" => BinaryOperator::Identity,
    "!=" => BinaryOperator::NotEqual,
    ">=" => BinaryOperator::GreaterEqual,
    ">" => BinaryOperator::Greater,
}

BinaryOr: Box<Expression> = {
    <start:@L> <left:BinaryOr> <op:BinaryOrOp> <right:BinaryXor> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    BinaryXor,
}

BinaryOrOp: BinaryOperator = {
    "|" => BinaryOperator::BinaryOr,
}

BinaryXor: Box<Expression> = {
    <start:@L> <left:BinaryXor> <op:BinaryXorOp> <right:BinaryAnd> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    BinaryAnd,
}

BinaryXorOp: BinaryOperator = {
    "^" => BinaryOperator::BinaryXor,
}

BinaryAnd: Box<Expression> = {
    <start:@L> <left:BinaryAnd> <op:BinaryAndOp> <right:BitShift> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    BitShift,
}

BinaryAndOp: BinaryOperator = {
    "&" => BinaryOperator::BinaryAnd,
}

BitShift: Box<Expression> = {
    <start:@L> <left:BitShift> <op:BitShiftOp> <right:Sum> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    Sum,
}

BitShiftOp: BinaryOperator = {
    "<<" => BinaryOperator::ShiftLeft,
    ">>" => BinaryOperator::ShiftRight,
}

Sum: Box<Expression> = {
    <start:@L> <left:Sum> <op:SumOp> <right:Product> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    Product,
}

SumOp: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

Product: Box<Expression> = {
    <start:@L> <left:Product> <op:ProductOp> <right:Power> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    Power,
}

ProductOp: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "%" => BinaryOperator::Mod,
}

Power: Box<Expression> = {
    <start:@L> <left:Term> <op:PowOp> <right:Power> <end:@R> => ctx.to_expr_with_source_ref(BinaryOperation { left, op, right }, start, end),
    Unary,
}

PowOp: BinaryOperator = {
    "**" => BinaryOperator::Pow,
}

Unary: Box<Expression> = {
    <start:@L> <op:PrefixUnaryOp> <expr:PostfixUnary> <end:@R> => ctx.to_expr_with_source_ref(UnaryOperation{op, expr}, start, end),
    PostfixUnary,
}

PrefixUnaryOp: UnaryOperator = {
    "-" => UnaryOperator::Minus,
    "!" => UnaryOperator::LogicalNot,
}

PostfixUnary: Box<Expression> = {
    <start:@L> <t:Term> <op:PostfixUnaryOp> <end:@R> => ctx.to_expr_with_source_ref(UnaryOperation{op, expr: t}, start, end),
    Term,
}

PostfixUnaryOp: UnaryOperator = {
    "'" => UnaryOperator::Next,
}

Term: Box<Expression> = {
    <start:@L> <i:IndexAccess> <end:@R> => ctx.to_expr_with_source_ref(i, start, end),
    <start:@L> <f:FunctionCall> <end:@R> => ctx.to_expr_with_source_ref(f, start, end),
    <start:@L> <i:ConstantIdentifier> <end:@R> => ctx.to_expr_with_source_ref(NamespacedPolynomialReference::from_identifier(i), start, end),
    <start:@L> <g:GenericReference> <end:@R> => ctx.to_expr_with_source_ref(g, start, end),
    <start:@L> <p:PublicIdentifier> <end:@R> => Box::new(Expression::PublicReference(ctx.source_ref(start, end), p)),
    <start:@L> <value:Number> <end:@R> => ctx.to_expr_with_source_ref(Number {value: value.into(), type_: None}, start, end),
    <start:@L> <s:StringLiteral> <end:@R> => Box::new(Expression::String(ctx.source_ref(start, end), s)),
    MatchExpression,
    IfExpression,
    BlockExpression,
    <start:@L> "[" <items:ExpressionList> "]" <end:@R> => ctx.to_expr_with_source_ref(ArrayLiteral{items}, start, end),
    <start:@L> "(" <head:Expression> "," <tail:ExpressionList> ")" <end:@R> => { let mut list = vec![head]; list.extend(tail); Box::new(Expression::Tuple(ctx.source_ref(start, end), list)) },
    <start:@L> "(" ")" <end:@R> => Box::new(Expression::Tuple(ctx.source_ref(start, end), vec![])),
    "(" <BoxedExpression> ")",
    <start:@L> "${" <b:BoxedExpression> "}" <end:@R> => Box::new(Expression::FreeInput(ctx.source_ref(start, end), b))
}

IndexAccess: IndexAccess = {
    <array:Term> "[" <index:BoxedExpression> "]" => IndexAccess{<>},
}

FunctionCall: FunctionCall = {
    <function:Term> "(" <arguments:ExpressionList> ")" => FunctionCall {<>},
}

NamespacedPolynomialReference: NamespacedPolynomialReference = {
    <SymbolPath> => <>.into(),
    <namespace:Identifier> "." <name:Identifier> => SymbolPath::from_parts([namespace, name].into_iter().map(Part::Named)).into(),
}

GenericReference: NamespacedPolynomialReference = {
    <namespace:Identifier> "." <name:Identifier> => SymbolPath::from_parts([namespace, name].into_iter().map(Part::Named)).into(),
    <path:GenericSymbolPath> => NamespacedPolynomialReference{path: path.0, type_args: path.1},
}

MatchExpression: Box<Expression> = {
    <start:@L> "match" <scrutinee:BoxedExpression> "{" <arms:MatchArms> "}" <end:@R> => ctx.to_expr_with_source_ref(MatchExpression{scrutinee, arms}, start, end),
}

MatchArms: Vec<MatchArm> = {
    => vec![],
    <mut list:( <MatchArm> "," )*> <end:MatchArm> ","?  => { list.push(end); list }
}

MatchArm: MatchArm = {
    <pattern:Pattern> "=>" <value: Expression> => MatchArm{pattern, value},
}

IfExpression: Box<Expression> = {
    <start:@L> "if" <condition:BoxedExpression>
        <body:BlockExpression>
        "else"
        <else_body:BlockExpression>
        <end:@R> => ctx.to_expr_with_source_ref(IfExpression{condition, body, else_body}, start, end),
}


BlockExpression: Box<Expression> = {
    <start:@L> "{" <statements:StatementInsideBlock*> <expr:BoxedExpression?> "}" <end:@R> => ctx.to_expr_with_source_ref(BlockExpression{statements, expr}, start, end),
}

StatementInsideBlock: StatementInsideBlock = {
    "let" <pattern:Pattern> <ty:(":" <Type<ArrayLengthNumber>>)?> <value:("=" <Expression>)?> ";" => StatementInsideBlock::LetStatement(LetStatementInsideBlock{<>}),
    <Expression> ";" => StatementInsideBlock::Expression(<>),
}

// ---------------------------- Pattern -----------------------------

Pattern: Pattern = {
    <start:@L> "_" <end:@R> => Pattern::CatchAll(ctx.source_ref(start, end)),
    <start:@L> <n:Number> <end:@R> => Pattern::Number(ctx.source_ref(start, end), n.into()),
    <start:@L> "-" <n:Number> <end:@R> => Pattern::Number(ctx.source_ref(start, end), -BigInt::from(n)),
    <start:@L> <l:StringLiteral> <end:@R> => Pattern::String(ctx.source_ref(start, end), l),
    TuplePattern,
    ArrayPattern,
    // We never parse Pattern::Variable directly. Instead, we
    // parse all identifiers (and symbol paths) as Pattern::Enum.
    // At symbol resolution stage, single identifiers that do not
    // exist in the current scope are then turned into Pattern::Variable
    // to allow `match x { (y, None) => ... }` to bind the first component
    // to `y` and match the enum variant `None` at the same time.
    EnumPattern,
}

PatternIncludingEllipsis: Pattern = {
    Pattern => <>,
    <start:@L> ".." <end:@R> => Pattern::Ellipsis(ctx.source_ref(start, end)),
}

TuplePattern: Pattern = {
    <start:@L> "(" ")" <end:@R> => Pattern::Tuple(ctx.source_ref(start, end), vec![]),
    <start:@L> "(" <mut items:(<Pattern> ",")+> <last:Pattern> ")" <end:@R> => Pattern::Tuple(ctx.source_ref(start, end), {items.push(last); items})
}

ArrayPattern: Pattern = {
    <start:@L> "[" "]" <end:@R> => Pattern::Array(ctx.source_ref(start, end), vec![]),
    <start:@L> "[" <mut items:(<PatternIncludingEllipsis> ",")*> <last:PatternIncludingEllipsis> "]" <end:@R> => Pattern::Array(ctx.source_ref(start, end), {items.push(last); items})
}

EnumPattern: Pattern = {
    <start:@L> <n:SymbolPath> <items:( "(" <PatternList> ")" )?> <end:@R> => Pattern::Enum(ctx.source_ref(start, end), n, items)
}

PatternList: Vec<Pattern> = {
    <mut list:( <Pattern> "," )*> <end:Pattern>  => { list.push(end); list },
    => vec![]
}

// ---------------------------- Trait/Impl Declaration -----------------------------

GenericTraitName: (SymbolPath, TraitScheme) = {
    <vars:("<" <TypeVarBounds> ">")> <name:SymbolPath> <types:("<" <TypeTermList<ArrayLengthNumber>> ">")> =>
        (name, TraitScheme{ vars, types })
}

TraitImplementation: TraitImplementation<Expression> = {
    "impl" <type_scheme: GenericTraitName> "{" <functions:ImplFunctions> "}" => TraitImplementation { name: type_scheme.0, type_scheme: type_scheme.1, functions }
}

ImplFunctions: Vec<NamedExpression<Expression>> = {
    => vec![],
    <mut list:( <ImplFunction> "," )*> <end:ImplFunction> ","  => { list.push(end); list }
}

ImplFunction: NamedExpression<Expression> = {
    <name:Identifier> ":" <body:BoxedExpression> => NamedExpression { name, body }
}

TraitDeclaration: TraitDeclaration<Expression> = {
    "trait" <name:Identifier> <type_vars:("<" <TraitVars> ">")> "{" <functions:TraitFunctions> "}" => TraitDeclaration { name, type_vars, functions }
}

TraitVars: Vec<String> = {
    <mut list:( <TypeVar> "," )*> <end:TypeVar> ","?  => { list.push(end); list }
}

TraitFunctions: Vec<TraitFunction<Expression>> = {
    => vec![],
    <mut list:( <TraitFunction> "," )*> <end:TraitFunction> ","  => { list.push(end); list }
}

TraitFunction: TraitFunction<Expression> = {
    <name:Identifier> ":" <params:TypeTermList<Expression>> "->" <value:TypeTermBox<Expression>> => TraitFunction { name, ty: Type::Function(FunctionType{params, value}) }
}


// ---------------------------- Type Declarations -----------------------------

EnumDeclaration: EnumDeclaration<Expression> = {
    "enum" <name:Identifier> <type_vars:("<" <TypeVarBounds> ">")?> "{" <variants:EnumVariants> "}"
        => EnumDeclaration{name, type_vars: type_vars.unwrap_or_default(), variants}
}

EnumVariants: Vec<EnumVariant<Expression>> = {
    => vec![],
    <mut list:( <EnumVariant> "," )*> <end:EnumVariant> ","?  => { list.push(end); list }
}

EnumVariant: EnumVariant<Expression> = {
    <name:Identifier> <fields:("(" <TypeTermList<Expression>> ")")?> => EnumVariant{<>}
}

// ---------------------------- Type Names -----------------------------

pub TypeExpr = Type<Expression>;
pub TypeNumber = Type<Number>;

Type<ArrayLength>: Type<ArrayLength> = {
    <params:TypeTermList<ArrayLength>> "->" <value:TypeTermBox<ArrayLength>> => Type::Function(FunctionType{<>}),
    TypeTerm<ArrayLength>
}

TypeTermList<ArrayLength>: Vec<Type<ArrayLength>> = {
    => vec![],
    <mut list:( <TypeTerm<ArrayLength>> "," )*> <end:TypeTerm<ArrayLength>>  => { list.push(end); list }
}

TypeTermBox<ArrayLength>: Box<Type<ArrayLength>> = {
    TypeTerm<ArrayLength> => Box::new(<>)
}

TypeTerm<ArrayLength>: Type<ArrayLength> = {
    // The parser parses all identifiers as NamedTypes, some are translated
    // to TypeVars later.
    TypeSymbolPath ("<" <TypeTermList<ArrayLength>> ">")? => Type::NamedType(<>),
    "!" => Type::Bottom,
    "bool" => Type::Bool,
    "int" => Type::Int,
    "fe" => Type::Fe,
    "string" => Type::String,
    "col" => Type::Col,
    "expr" => Type::Expr,
    <base:TypeTerm<ArrayLength>> "[" <length:ArrayLength?> "]" => Type::Array(ArrayType{base: Box::new(base), length}),
    "(" <mut items:( <TypeTerm<ArrayLength>> "," )+> <end:TypeTerm<ArrayLength>> ")" => { items.push(end); Type::Tuple(TupleType{items}) },
    "(" ")" => Type::Tuple(TupleType{items: vec![]}),
    "(" <Type<ArrayLength>> ")",
}

ArrayLengthExpr: Expression = {
    Expression
}

ArrayLengthNumber: u64 = {
    Number => u64::try_from(<>).unwrap()
}

TypeVar: String = {
    UppercaseIdentifier => <>,
}


// bounds should be SymbolPaths in the future.
pub TypeVarBounds: TypeBounds = {
    => Default::default(),
    <list:( <TypeVarWithBounds> "," )*> <end:TypeVarWithBounds> => TypeBounds::new(list.into_iter().chain(std::iter::once(end)))
}

TypeVarWithBounds: (String, BTreeSet<String>) = {
    <TypeVar> <TypeBoundsList> => (<>)
}

TypeBoundsList: BTreeSet<String> = {
    => Default::default(),
    ":" <list:( <Identifier> "+" )*> <end:Identifier>  => list.into_iter().chain(std::iter::once(end)).collect(),
}



// ---------------------------- Terminals -----------------------------



StringLiteral: String = {
    r#""[^\\"\n\r]*(\\[tnfbrx'"\\0-9][^\\"\n\r]*)*""# => unescape_string(<>)
}

Identifier: String = {
    r"[a-z_][a-zA-Z$_0-9@]*" => <>.to_string(),
    UppercaseIdentifier,
    SpecialIdentifier => <>.to_string(),
}

NonSpecialIdentifier: String = {
    r"[a-z_][a-zA-Z$_0-9@]*" => <>.to_string(),
    UppercaseIdentifier => <>.to_string(),
}

UppercaseIdentifier: String = {
    r"[A-Z][a-zA-Z$_0-9@]*" => <>.to_string(),
}

// These identifier are special in the way that the lexer would treat them as keywords,
// but these keywords can never occur in a place where an identifier can be expected,
// so we allow them as identifiers as well.
SpecialIdentifier: &'input str = {
    "file",
    "loc",
    "insn",
    "int",
    "fe",
    "expr",
    "bool",
}

ConstantIdentifier: String = {
    r"%[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.to_string(),
}

PublicIdentifier: String = {
    r":[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.strip_prefix(":").unwrap().to_string()
}

Number: BigUint = {
    r"[0-9][0-9_]*" => BigUint::from_str(&<>.replace('_', "")).unwrap().into(),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => BigUint::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap().into(),
}

UnsignedInteger: BigUint = {
    r"[0-9][0-9_]*" => BigUint::from_str(&<>.replace('_', "")).unwrap(),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => BigUint::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap(),
}
