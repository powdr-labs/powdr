use std::str::FromStr;
use ast::parsed::{*, asm::*};
use number::{AbstractNumberType, FieldElement};
use num_traits::Num;

grammar<T> where T: FieldElement;

match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _,
}

pub PILFile: PILFile<T> = {
    (<PilStatement> ";")* => PILFile(<>)

};

pub ASMFile: ASMFile<T> = {
    (<Machine>)* => ASMFile { machines: <> }
};

// ---------------------------- PIL part -----------------------------

pub PilStatement = {
    Include,
    Namespace,
    ConstantDefinition,
    PolynomialDefinition,
    PublicDeclaration,
    PolynomialConstantDeclaration,
    PolynomialConstantDefinition,
    PolynomialCommitDeclaration,
    PolynomialIdentity,
    PlookupIdentity,
    PermutationIdentity,
    ConnectIdentity,
    MacroDefinition,
    FunctionCallStatement,
};

Include: PilStatement<T> = {
    <start:@L> "include" <file:StringLiteral> => PilStatement::Include(<>)
};

Namespace: PilStatement<T> = {
    <start:@L> "namespace" <name:Identifier> "(" <pol_degree:Expression> ")" => PilStatement::Namespace(<>)
}

ConstantDefinition: PilStatement<T> = {
    <@L> "constant" <ConstantIdentifier> "=" <Expression> => PilStatement::ConstantDefinition(<>)
}

PolynomialDefinition: PilStatement<T> = {
    <@L> PolCol <Identifier> "=" <Expression> => PilStatement::PolynomialDefinition(<>)
}

PublicDeclaration: PilStatement<T> = {
    <@L> "public" <Identifier> "=" <NamespacedPolynomialReference> "(" <Expression> ")" => PilStatement::PublicDeclaration(<>)
}

PolynomialConstantDeclaration: PilStatement<T> = {
    <@L> PolCol ConstantFixed <PolynomialNameList> => PilStatement::PolynomialConstantDeclaration(<>)
}

PolynomialConstantDefinition: PilStatement<T> = {
    <@L> PolCol ConstantFixed <Identifier> <FunctionDefinition>
        => PilStatement::PolynomialConstantDefinition(<>)
}

FunctionDefinition: FunctionDefinition<T> = {
    "(" <ParameterList> ")" "{" <Expression> "}" => FunctionDefinition::Mapping(<>),
    "=" <ArrayLiteralExpression> => FunctionDefinition::Array(<>),
}

ParameterList: Vec<String> = {
    <mut list:( <Identifier> "," )*> <end:Identifier>  => { list.push(end); list },
    => vec![]
}

ArrayLiteralExpression: ArrayExpression<T> = {
    <ArrayLiteralExpression> "+" <ArrayLiteralTerm> => ArrayExpression::concat(<>),
    ArrayLiteralTerm,
}

ArrayLiteralTerm: ArrayExpression<T> = {
    "[" <ExpressionList> "]" => ArrayExpression::value(<>),
    "[" <ExpressionList> "]" "*" => ArrayExpression::repeated_value(<>),
}

PolynomialCommitDeclaration: PilStatement<T> = {
    <@L> PolCol CommitWitness <PolynomialNameList> => PilStatement::PolynomialCommitDeclaration(<>, None),
    <start:@L> PolCol CommitWitness <name:PolynomialName> "(" <param:ParameterList> ")" "query" <value:Expression>
     => PilStatement::PolynomialCommitDeclaration(start, vec![name], Some(FunctionDefinition::Query(param, value)))
}

PolynomialIdentity: PilStatement<T> = {
    <start:@L> <l:BoxedExpression> "=" <r:BoxedExpression> => PilStatement::PolynomialIdentity(start, Expression::BinaryOperation(l, BinaryOperator::Sub, r))
}

PolynomialNameList: Vec<PolynomialName<T>> = {
    <mut list:( <PolynomialName> "," )*> <end:PolynomialName>  => { list.push(end); list }
}

PolynomialName: PolynomialName<T> = {
    <name:Identifier> <array_size:( "[" <Expression> "]" )?> => PolynomialName{<>}
}

PlookupIdentity: PilStatement<T> = {
    <@L> <SelectedExpressions> "in" <SelectedExpressions> => PilStatement::PlookupIdentity(<>)
}

SelectedExpressions: SelectedExpressions<T> = {
    <selector:Expression?> "{" <expressions:ExpressionList> "}" => SelectedExpressions{<>},
    Expression => SelectedExpressions{selector: None, expressions: vec![<>]},
}

PermutationIdentity: PilStatement<T> = {
    <@L> <SelectedExpressions> "is" <SelectedExpressions> => PilStatement::PermutationIdentity(<>)
}

ConnectIdentity: PilStatement<T> = {
    <@L> "{" <ExpressionList> "}" "connect" "{" <ExpressionList> "}" => PilStatement::ConnectIdentity(<>)
}

MacroDefinition: PilStatement<T> = {
    <@L> "macro" <Identifier> "(" <ParameterList> ")" "{" <( <PilStatement> ";")*> <Expression?> "}"
        => PilStatement::MacroDefinition(<>)
}

FunctionCallStatement: PilStatement<T> = {
    <@L> <Identifier> "(" <ExpressionList> ")" => PilStatement::FunctionCall(<>)
}

PolCol = {
    "pol", "col"
} 

CommitWitness = {
    "commit", "witness"
} 

ConstantFixed = {
    "constant", "fixed"
} 

// ---------------------------- ASM part -----------------------------

Machine: Machine<T> = {
    <start:@L> "machine" <name:Identifier> <arguments:MachineArguments> "{" <statements:(MachineStatement)*> "}" => Machine{<>}
}

MachineArguments: MachineArguments = {
    "(" "_" "," "_" ")" => MachineArguments::default(),
    "(" <latch:Identifier> "," "_" ")" => MachineArguments { latch: Some(latch), function_id: None },
    "(" "_" "," <function_id:Identifier> ")" => MachineArguments { latch: None, function_id: Some(function_id) },
    "(" <latch:Identifier> "," <function_id:Identifier> ")" => MachineArguments { latch: Some(latch), function_id: Some(function_id) },
    => MachineArguments::default(),
}

MachineStatement: MachineStatement<T> = {
    Degree,
    Submachine,
    RegisterDeclaration,
    InstructionDeclaration,
    InlinePil,
    FunctionDeclaration,
}

Degree: MachineStatement<T> = {
    <@L> "degree" <Integer> ";" => MachineStatement::Degree(<>)
}

Submachine: MachineStatement<T> = {
    <@L> <Identifier> <Identifier> ";" => MachineStatement::Submachine(<>)
}

pub RegisterDeclaration: MachineStatement<T> = {
    // TODO default update
    <@L> "reg" <Identifier> <( "[" <RegisterFlag> "]" )?> ";" => MachineStatement::RegisterDeclaration(<>)

}

RegisterFlag: RegisterFlag = {
    "@pc" => RegisterFlag::IsPC,
    "<=" => RegisterFlag::IsAssignment,
    "@r" => RegisterFlag::IsReadOnly,
}

pub InstructionDeclaration: MachineStatement<T> = {
    <@L> "instr" <Identifier> <Instruction> => MachineStatement::InstructionDeclaration(<>)
}

pub Instruction: Instruction<T> = {
    <params:Params> <body:InstructionBody> => Instruction { params, body }
}

pub InstructionBody: InstructionBody<T> = {
    "{}" => InstructionBody::Local(vec![]),
    "{" <InstructionBodyElements> "}" => InstructionBody::Local(<>),
    "=" <Identifier> "." <Identifier> => InstructionBody::External(<>),
}

InstructionBodyElements: Vec<InstructionBodyElement<T>> = {
    <mut list:( <InstructionBodyElement> "," )*> <end:InstructionBodyElement>  => { list.push(end); list },
    => vec![]
}

InstructionBodyElement: InstructionBodyElement<T> = {
    <l:Expression> "=" <r:Expression> => InstructionBodyElement::PolynomialIdentity(l, r),
    <SelectedExpressions> <PlookupOperator> <SelectedExpressions> => InstructionBodyElement::PlookupIdentity(<>),
    <id:Identifier> "(" <arguments:ExpressionList> ")" => InstructionBodyElement::FunctionCall(FunctionCall {<>})
}

// This is only valid in instructions, not in PIL in general.
// "connect" is not supported because it does not support selectors
// and we need that for the instruction.

PlookupOperator: PlookupOperator = {
    "in" => PlookupOperator::In,
    "is" => PlookupOperator::Is,
}

Params: Params = {
    <_input: ParamList> "->" <output: ParamList> => Params::new(_input, Some(output)),
    // we can ommit the arrow if there are no outputs
    <_input: ParamList> => Params::new(_input, None)

}

ParamList: ParamList = {
    => ParamList::new(vec![]),
    <mut list:( <Param> "," )*> <end:Param>  => { list.push(end); ParamList::new(list) }
}

Param: Param = {
    <name: Identifier> <ty:(":" <Identifier>)?> =>
        Param{name, ty}
}

InlinePil: MachineStatement<T> = {
    <@L> "constraints" "{" <(<PilStatement> ";")*> "}" => MachineStatement::InlinePil(<>)
}

FunctionDeclaration: MachineStatement<T> = {
    <@L> "function" <Identifier> <FunctionId> <Params> "{" <(<FunctionStatement>)*> "}" => MachineStatement::FunctionDeclaration(<>)
}

FunctionId: Option<FunctionId<T>> = {
    "<" <id:FieldElement> ">" => Some(FunctionId { id }),
    => None
}

pub FunctionStatement: FunctionStatement<T> = {
    AssignmentStatement,
    LabelStatement,
    DebugDirectiveStatement,
    ReturnStatement,
    InstructionStatement,
}

AssignmentStatement: FunctionStatement<T> = {
    <@L> <IdentifierList> <AssignOperator> <BoxedExpression> ";" => FunctionStatement::Assignment(<>)
}

IdentifierList: Vec<String> = {
    <mut list:( <Identifier> "," )*> <end:Identifier>  => { list.push(end); list },
    => vec![]
}

AssignOperator: Option<String> = {
    "<=" <Identifier?> "="
}

ReturnStatement: FunctionStatement<T> = {
    <@L> "return" <ExpressionList> ";" => FunctionStatement::Return(<>)
}

InstructionStatement: FunctionStatement<T> = {
    <@L> <Identifier> <ExpressionList> ";" => FunctionStatement::Instruction(<>)
}

DebugDirectiveStatement: FunctionStatement<T> = {
    <l:@L> "debug" "file" <n:Integer> <d:StringLiteral> <f:StringLiteral> ";"
        => FunctionStatement::DebugDirective(l, DebugDirective::File(n.try_into().unwrap(), d, f)),
    <l:@L> "debug" "loc" <f:Integer> <line:Integer> <col:Integer> ";"
        => FunctionStatement::DebugDirective(l, DebugDirective::Loc(f.try_into().unwrap(), line.try_into().unwrap(), col.try_into().unwrap())),
}

LabelStatement: FunctionStatement<T> = {
    <@L> <Identifier> "::" => FunctionStatement::Label(<>)
}

// ---------------------------- Expressions -----------------------------

ExpressionList: Vec<Expression<T>> = {
    => vec![],
    <mut list:( <Expression> "," )*> <end:Expression>  => { list.push(end); list }
}

Expression: Expression<T> = {
    BoxedExpression => *<>,
}

BoxedExpression: Box<Expression<T>> = {
    BinaryOr,
}

BinaryOr: Box<Expression<T>> = {
    BinaryOr BinaryOrOp BinaryXor => Box::new(Expression::BinaryOperation(<>)),
    BinaryXor,
}

BinaryOrOp: BinaryOperator = {
    "|" => BinaryOperator::BinaryOr,
}

BinaryXor: Box<Expression<T>> = {
    BinaryXor BinaryXorOp BinaryAnd => Box::new(Expression::BinaryOperation(<>)),
    BinaryAnd,
}

BinaryXorOp: BinaryOperator = {
    "^" => BinaryOperator::BinaryXor,
}

BinaryAnd: Box<Expression<T>> = {
    BinaryAnd BinaryAndOp BitShift => Box::new(Expression::BinaryOperation(<>)),
    BitShift,
}

BinaryAndOp: BinaryOperator = {
    "&" => BinaryOperator::BinaryAnd,
}

BitShift: Box<Expression<T>> = {
    BitShift BitShiftOp Sum => Box::new(Expression::BinaryOperation(<>)),
    Sum,
}

BitShiftOp: BinaryOperator = {
    "<<" => BinaryOperator::ShiftLeft,
    ">>" => BinaryOperator::ShiftRight,
}

Sum: Box<Expression<T>> = {
    Sum SumOp Product => Box::new(Expression::BinaryOperation(<>)),
    Product,
}

SumOp: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

Product: Box<Expression<T>> = {
    Product ProductOp Power => Box::new(Expression::BinaryOperation(<>)),
    Power,
}

ProductOp: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "%" => BinaryOperator::Mod,
}

Power: Box<Expression<T>> = {
    <Power> <PowOp> <Term> => Box::new(Expression::BinaryOperation(<>)),
    Unary,
}

PowOp: BinaryOperator = {
    "**" => BinaryOperator::Pow,
}

Unary: Box<Expression<T>> = {
    UnaryOp Term => Box::new(Expression::UnaryOperation(<>)),
    Term,
}

UnaryOp: UnaryOperator = {
    "+" => UnaryOperator::Plus,
    "-" => UnaryOperator::Minus,
}

Term: Box<Expression<T>> = {
    FunctionCall => Box::new(Expression::FunctionCall(<>)),
    ConstantIdentifier => Box::new(Expression::Constant(<>)),
    ShiftedPolynomialReference => Box::new(Expression::PolynomialReference(<>)),
    PublicReference => Box::new(Expression::PublicReference(<>)),
    FieldElement => Box::new(Expression::Number(<>)),
    StringLiteral => Box::new(Expression::String(<>)),
    MatchExpression,
    "(" <head:Expression> "," <tail:ExpressionList> ")" => { let mut list = vec![head]; list.extend(tail); Box::new(Expression::Tuple(list)) },
    "(" <BoxedExpression> ")",
    "${" <BoxedExpression> "}" => Box::new(Expression::FreeInput(<>))
}

FunctionCall: FunctionCall<T> = {
    <id:Identifier> "(" <arguments:ExpressionList> ")" => FunctionCall {<>},
}

ShiftedPolynomialReference: ShiftedPolynomialReference<T> = {
    <pol:NamespacedPolynomialReference>
    <next:"'"?> => pol.with_shift(next.is_some()),
}

NamespacedPolynomialReference: NamespacedPolynomialReference<T> = {
    <namespace:( <Identifier> "." )?>
    <pol:IndexedPolynomialReference> => pol.with_namespace(namespace),
}

IndexedPolynomialReference: IndexedPolynomialReference<T> = {
    <pol:PolynomialReference>
    <index:( "[" <Expression> "]" )?> => pol.with_index(index),
}

PolynomialReference: PolynomialReference = {
    <name:Identifier> => PolynomialReference::new(name),
}

PublicReference: String = {
    ":" <Identifier>
}

MatchExpression: Box<Expression<T>> = {
    "match" <BoxedExpression> "{" <MatchArms> "}" => Box::new(Expression::MatchExpression(<>))
}

MatchArms: Vec<(Option<Expression<T>>, Expression<T>)> = {
    => vec![],
    <mut list:( <MatchArm> "," )*> <end:MatchArm> ","?  => { list.push(end); list }
}

MatchArm: (Option<Expression<T>>, Expression<T>) = {
    <n:Expression> "=>" <e:Expression> => (Some(n), e),
    <n:"_"> "=>" <e:Expression> => (None, e),
}

// ---------------------------- Terminals -----------------------------


StringLiteral: String = {
    r#""[^"]*""# => <>[1..<>.len() - 1].to_string()
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.to_string()
}

ConstantIdentifier: String = {
    // TODO it seems the lexer splits the token after %
    "%N" => <>.to_string(),
    r"%[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.to_string(),
}

FieldElement: T = {
    r"[0-9][0-9_]*" => T::from_str(&<>.replace('_', "")),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => T::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap(),
}

Integer: AbstractNumberType = {
    r"[0-9][0-9_]*" => AbstractNumberType::from_str(&<>.replace('_', "")).unwrap(),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => AbstractNumberType::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap(),
}