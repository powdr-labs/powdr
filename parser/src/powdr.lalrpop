use std::str::FromStr;
use powdr_ast::parsed::{*, asm::*};
use powdr_number::{AbstractNumberType, FieldElement};
use num_traits::Num;
use crate::ParserContext;

grammar<T>(ctx: &ParserContext) where T: FieldElement;

match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },  // Skip `/* comments */`
    _,
}

pub PILFile: PILFile<T> = {
    (<PilStatement> ";")* => PILFile(<>)
};

pub ASMModule: ASMModule<T> = {
    (<ModuleStatement>)* => ASMModule { statements: <> }
};

ModuleStatement: ModuleStatement<T> = {
    <MachineDefinition> => ModuleStatement::SymbolDefinition(<>),
    <LetStatementAtModuleLevel> => ModuleStatement::SymbolDefinition(<>),
    <Import> => ModuleStatement::SymbolDefinition(<>),
    <ModuleDefinition> => ModuleStatement::SymbolDefinition(<>),
}

ModuleDefinition: SymbolDefinition<T> = {
    "mod" <name:Identifier> ";" => SymbolDefinition { name: name.clone(), value: Module::External(name).into() }, 
    "mod" <name:Identifier> "{" <module:ASMModule> "}" => SymbolDefinition { name, value: Module::Local(module).into() }
}

Import: SymbolDefinition<T> = {
    "use" <path:SymbolPath> <name:( "as" <Identifier> )?> ";" =>
        SymbolDefinition {
            name: name.unwrap_or(path.name().clone().try_into().unwrap()),
            value: Import {path}.into()
        }
}

pub SymbolPath: SymbolPath = {
    <abs:"::"?> <parts:( <Part> "::" )*> <end:Part>  => {
        SymbolPath::from_parts([
            abs.map(|_| vec![Part::Named(String::new())]).unwrap_or_default(),
            parts,
            vec![end],
        ].concat())
    },
}

Part: Part = {
    "super" => Part::Super,
    <name:Identifier> => Part::Named(name),
}

LetStatementAtModuleLevel: SymbolDefinition<T> = {
    "let" <name:Identifier> "=" <value:Expression> ";" => SymbolDefinition { name, value: SymbolValue::Expression(value) }
}

// ---------------------------- PIL part -----------------------------

pub PilStatement = {
    Include,
    Namespace,
    LetStatement,
    ConstantDefinition,
    PolynomialDefinition,
    PublicDeclaration,
    PolynomialConstantDeclaration,
    PolynomialConstantDefinition,
    PolynomialCommitDeclaration,
    PolynomialIdentity,
    PlookupIdentity,
    PermutationIdentity,
    ConnectIdentity,
    ExpressionStatement,
};

Include: PilStatement<T> = {
    <start:@L> "include" <file:StringLiteral> => PilStatement::Include(ctx.source_ref(start), file)
};

Namespace: PilStatement<T> = {
    <start:@L> "namespace" <name:SymbolPath> "(" <pol_degree:Expression> ")" => PilStatement::Namespace(ctx.source_ref(start), name, pol_degree)
}

LetStatement: PilStatement<T> = {
    <start:@L> "let" <id:Identifier> <expr:( "=" <Expression> )?> => PilStatement::LetStatement(ctx.source_ref(start), id, expr)
}

ConstantDefinition: PilStatement<T> = {
    <start:@L> "constant" <id:ConstantIdentifier> "=" <expr:Expression> => PilStatement::ConstantDefinition(ctx.source_ref(start), id, expr)
}

PolynomialDefinition: PilStatement<T> = {
    <start:@L> PolCol <id:Identifier> "=" <expr:Expression> => PilStatement::PolynomialDefinition(ctx.source_ref(start), id, expr)
}

PublicDeclaration: PilStatement<T> = {
    <start:@L> "public" <id:Identifier> "="
        <poly:NamespacedPolynomialReference>
        <expr1:("[" <Expression> "]")?>
        "(" <expr2:Expression> ")" => PilStatement::PublicDeclaration(ctx.source_ref(start), id, poly, expr1, expr2)
}

PolynomialConstantDeclaration: PilStatement<T> = {
    <start:@L> PolCol ConstantFixed <list:PolynomialNameList> => PilStatement::PolynomialConstantDeclaration(ctx.source_ref(start), list)
}

PolynomialConstantDefinition: PilStatement<T> = {
    <start:@L> PolCol ConstantFixed <id:Identifier> <def:FunctionDefinition>
        => PilStatement::PolynomialConstantDefinition(ctx.source_ref(start), id, def)
}

FunctionDefinition: FunctionDefinition<T> = {
    "(" <params:ParameterList> ")" "{" <body:BoxedExpression> "}" => FunctionDefinition::Expression(Expression::LambdaExpression(LambdaExpression{params, body})),
    "=" <ArrayLiteralExpression> => FunctionDefinition::Array(<>),
}

ParameterList: Vec<String> = {
    <mut list:( <Identifier> "," )*> <end:Identifier>  => { list.push(end); list },
    => vec![]
}

ArrayLiteralExpression: ArrayExpression<T> = {
    <ArrayLiteralExpression> "+" <ArrayLiteralTerm> => ArrayExpression::concat(<>),
    ArrayLiteralTerm,
}

ArrayLiteralTerm: ArrayExpression<T> = {
    "[" <ExpressionList> "]" => ArrayExpression::value(<>),
    "[" <ExpressionList> "]" "*" => ArrayExpression::repeated_value(<>),
}

PolynomialCommitDeclaration: PilStatement<T> = {
    <start:@L> PolCol CommitWitness <list:PolynomialNameList> => PilStatement::PolynomialCommitDeclaration(ctx.source_ref(start), list, None),
    <start:@L> PolCol CommitWitness <name:PolynomialName> "(" <params:ParameterList> ")" "query" <body:BoxedExpression>
     => PilStatement::PolynomialCommitDeclaration(
        ctx.source_ref(start),
        vec![name],
        Some(FunctionDefinition::Query(Expression::LambdaExpression(LambdaExpression{params, body})))
    )
}

PolynomialIdentity: PilStatement<T> = {
    <start:@L> <l:BoxedExpression> "=" <r:BoxedExpression> => PilStatement::PolynomialIdentity(ctx.source_ref(start), Expression::BinaryOperation(l, BinaryOperator::Sub, r))
}

PolynomialNameList: Vec<PolynomialName<T>> = {
    <mut list:( <PolynomialName> "," )*> <end:PolynomialName>  => { list.push(end); list }
}

PolynomialName: PolynomialName<T> = {
    <name:Identifier> <array_size:( "[" <Expression> "]" )?> => PolynomialName{<>}
}

PlookupIdentity: PilStatement<T> = {
    <start:@L> <se1:SelectedExpressions> "in" <se2:SelectedExpressions> => PilStatement::PlookupIdentity(ctx.source_ref(start), se1, se2)
}

SelectedExpressions: SelectedExpressions<Expression<T>> = {
    <selector:Expression?> "{" <expressions:ExpressionList> "}" => SelectedExpressions{<>},
    Expression => SelectedExpressions{selector: None, expressions: vec![<>]},
}

PermutationIdentity: PilStatement<T> = {
    <start:@L> <se1:SelectedExpressions> "is" <se2:SelectedExpressions> => PilStatement::PermutationIdentity(ctx.source_ref(start), se1, se2)
}

ConnectIdentity: PilStatement<T> = {
    <start:@L> "{" <list1:ExpressionList> "}" "connect" "{" <list2:ExpressionList> "}" => PilStatement::ConnectIdentity(ctx.source_ref(start), list1, list2)
}

ExpressionStatement: PilStatement<T> = {
    <start:@L> <expr:Expression> => PilStatement::Expression(ctx.source_ref(start), expr)
}

PolCol = {
    "pol", "col"
} 

CommitWitness = {
    "commit", "witness"
} 

ConstantFixed = {
    "constant", "fixed"
} 

// ---------------------------- ASM part -----------------------------

MachineDefinition: SymbolDefinition<T> = {
    "machine" <name:Identifier> <arguments:MachineArguments> "{" <statements:(MachineStatement)*> "}" => SymbolDefinition { name, value: Machine { arguments, statements}.into() }
}

MachineArguments: MachineArguments = {
    "(" "_" "," "_" ")" => MachineArguments::default(),
    "(" <latch:Identifier> "," "_" ")" => MachineArguments { latch: Some(latch), operation_id: None },
    "(" "_" "," <operation_id:Identifier> ")" => MachineArguments { latch: None, operation_id: Some(operation_id) },
    "(" <latch:Identifier> "," <operation_id:Identifier> ")" => MachineArguments { latch: Some(latch), operation_id: Some(operation_id) },
    => MachineArguments::default(),
}

MachineStatement: MachineStatement<T> = {
    Degree,
    Submachine,
    RegisterDeclaration,
    InstructionDeclaration,
    LinkDeclaration,
    PilStatementWithSemiColon,
    FunctionDeclaration,
    OperationDeclaration,
}

PilStatementWithSemiColon: MachineStatement<T> = {
    <start:@L> <stmt:PilStatement> ";" => MachineStatement::Pil(ctx.source_ref(start), stmt)
}

Degree: MachineStatement<T> = {
    <start:@L> "degree" <deg:Integer> ";" => MachineStatement::Degree(ctx.source_ref(start), deg)
}

Submachine: MachineStatement<T> = {
    <start:@L> <path:SymbolPath> <id:Identifier> ";" => MachineStatement::Submachine(ctx.source_ref(start), path, id)
}

pub RegisterDeclaration: MachineStatement<T> = {
    // TODO default update
    <start:@L> "reg" <id:Identifier> <flag:( "[" <RegisterFlag> "]" )?> ";" => MachineStatement::RegisterDeclaration(ctx.source_ref(start), id, flag)

}

RegisterFlag: RegisterFlag = {
    "@pc" => RegisterFlag::IsPC,
    "<=" => RegisterFlag::IsAssignment,
    "@r" => RegisterFlag::IsReadOnly,
}

pub InstructionDeclaration: MachineStatement<T> = {
    <start:@L> "instr" <id:Identifier> <instr:Instruction> => MachineStatement::InstructionDeclaration(ctx.source_ref(start), id, instr)
}

pub Instruction: Instruction<T> = {
    <params:Params> <body:InstructionBody> => Instruction { params, body }
}

pub LinkDeclaration: MachineStatement<T> = {
    <start:@L> "link" <flag:Expression> <params:Params> "=" <to:CallableRef> ";" => MachineStatement::LinkDeclaration(LinkDeclaration { source: ctx.source_ref(start), flag, params, to })
}

pub InstructionBody: InstructionBody<T> = {
    "{}" => InstructionBody::Local(vec![]),
    "{" <InstructionBodyElements> "}" => InstructionBody::Local(<>),
    "=" <f_ref:CallableRef> => InstructionBody::CallableRef(f_ref),
}

pub CallableRef: CallableRef = {
    <instance:Identifier> "." <callable:Identifier> => CallableRef { instance, callable }
}

InstructionBodyElements: Vec<PilStatement<T>> = {
    <mut list:( <InstructionBodyElement> "," )*> <end:InstructionBodyElement>  => { list.push(end); list },
    => vec![]
}

InstructionBodyElement: PilStatement<T> = {
    PolynomialIdentity,
    PlookupIdentity,
    PermutationIdentity,
    ExpressionStatement,
}

Params: Params<T> = {
    <_input: ParamList> "->" <output: ParamList> => Params::new(_input, Some(output)),
    // we can ommit the arrow if there are no outputs
    <_input: ParamList> => Params::new(_input, None)

}

ParamList: ParamList<T> = {
    => ParamList::new(vec![]),
    <mut list:( <Param> "," )*> <end:Param>  => { list.push(end); ParamList::new(list) }
}

Param: Param<T> = {
    <name: Identifier> <index:("[" <FieldElement> "]")?> <ty:(":" <Identifier>)?> => Param{<>}
}

FunctionDeclaration: MachineStatement<T> = {
    <start:@L> "function" <id:Identifier> <params:Params> "{" <stmt:(<FunctionStatement>)*> "}" => MachineStatement::FunctionDeclaration(ctx.source_ref(start), id, params, stmt)
}

OperationDeclaration: MachineStatement<T> = {
    <start:@L> "operation" <id:Identifier> <op:OperationId> <params:Params> ";" => MachineStatement::OperationDeclaration(ctx.source_ref(start), id, op, params)
}

OperationId: OperationId<T> = {
    "<" <id:FieldElement> ">" => OperationId { id: Some(id) },
    => OperationId { id: None }
}

pub FunctionStatement: FunctionStatement<T> = {
    AssignmentStatement,
    LabelStatement,
    DebugDirectiveStatement,
    ReturnStatement,
    InstructionStatement,
}

AssignmentStatement: FunctionStatement<T> = {
    <start:@L> <ids:IdentifierList> <op:AssignOperator> <expr:BoxedExpression> ";" => FunctionStatement::Assignment(ctx.source_ref(start), ids, op, expr)
}

IdentifierList: Vec<String> = {
    <mut list:( <Identifier> "," )*> <end:Identifier>  => { list.push(end); list },
    => vec![]
}

AssignOperator: Option<Vec<AssignmentRegister>> = {
    "<==" => None,
    "<=" <AssignmentRegisterList> "=" => Some(<>)
}

AssignmentRegisterList: Vec<AssignmentRegister> = {
    <mut list:( <AssignmentRegister> "," )*> <end:AssignmentRegister>  => { list.push(end); list },
    => vec![]
}

AssignmentRegister: AssignmentRegister = {
    <Identifier> => AssignmentRegister::Register(<>),
    "_" => AssignmentRegister::Wildcard,
}

ReturnStatement: FunctionStatement<T> = {
    <start:@L> "return" <list:ExpressionList> ";" => FunctionStatement::Return(ctx.source_ref(start), list)
}

InstructionStatement: FunctionStatement<T> = {
    <start:@L> <id:Identifier> <list:ExpressionList> ";" => FunctionStatement::Instruction(ctx.source_ref(start), id, list)
}

DebugDirectiveStatement: FunctionStatement<T> = {
    <start:@L> ".debug" "file" <n:Integer> <d:StringLiteral> <f:StringLiteral> ";"
        => FunctionStatement::DebugDirective(ctx.source_ref(start), DebugDirective::File(n.try_into().unwrap(), d, f)),
    <start:@L> ".debug" "loc" <f:Integer> <line:Integer> <col:Integer> ";"
        => FunctionStatement::DebugDirective(ctx.source_ref(start), DebugDirective::Loc(f.try_into().unwrap(), line.try_into().unwrap(), col.try_into().unwrap())),
    <start:@L> ".debug" "insn" <insn:StringLiteral> ";"
        => FunctionStatement::DebugDirective(ctx.source_ref(start), DebugDirective::OriginalInstruction(insn)),
}

LabelStatement: FunctionStatement<T> = {
    <start:@L> <id:Identifier> ":" => FunctionStatement::Label(ctx.source_ref(start), id)
}

// ---------------------------- Expressions -----------------------------

ExpressionList: Vec<Expression<T>> = {
    => vec![],
    <mut list:( <Expression> "," )*> <end:Expression>  => { list.push(end); list }
}

Expression: Expression<T> = {
    BoxedExpression => *<>,
}

BoxedExpression: Box<Expression<T>> = {
    LambdaExpression,
}

LambdaExpression: Box<Expression<T>> = {
    "||" <body:BoxedExpression> => Box::new(Expression::LambdaExpression(LambdaExpression{params: vec![], body})),
    "|" <params:ParameterList> "|" <body:BoxedExpression> => Box::new(Expression::LambdaExpression(LambdaExpression{params, body})),
    LogicalOr
}

LogicalOr: Box<Expression<T>> = {
    <l:LogicalOr> "||" <r:LogicalAnd> => Box::new(Expression::BinaryOperation(l, BinaryOperator::LogicalOr, r)),
    LogicalAnd,
}

LogicalAnd: Box<Expression<T>> = {
    <l:LogicalAnd> "&&" <r:Comparison> => Box::new(Expression::BinaryOperation(l, BinaryOperator::LogicalAnd, r)),
    Comparison,
}

Comparison: Box<Expression<T>> = {
    <BinaryOr> <ComparisonOp> <BinaryOr> => Box::new(Expression::BinaryOperation(<>)),
    BinaryOr
}

ComparisonOp: BinaryOperator = {
    "<" => BinaryOperator::Less,
    "<=" => BinaryOperator::LessEqual,
    "==" => BinaryOperator::Equal,
    "!=" => BinaryOperator::NotEqual,
    ">=" => BinaryOperator::GreaterEqual,
    ">" => BinaryOperator::Greater,
}

BinaryOr: Box<Expression<T>> = {
    BinaryOr BinaryOrOp BinaryXor => Box::new(Expression::BinaryOperation(<>)),
    BinaryXor,
}

BinaryOrOp: BinaryOperator = {
    "|" => BinaryOperator::BinaryOr,
}

BinaryXor: Box<Expression<T>> = {
    BinaryXor BinaryXorOp BinaryAnd => Box::new(Expression::BinaryOperation(<>)),
    BinaryAnd,
}

BinaryXorOp: BinaryOperator = {
    "^" => BinaryOperator::BinaryXor,
}

BinaryAnd: Box<Expression<T>> = {
    BinaryAnd BinaryAndOp BitShift => Box::new(Expression::BinaryOperation(<>)),
    BitShift,
}

BinaryAndOp: BinaryOperator = {
    "&" => BinaryOperator::BinaryAnd,
}

BitShift: Box<Expression<T>> = {
    BitShift BitShiftOp Sum => Box::new(Expression::BinaryOperation(<>)),
    Sum,
}

BitShiftOp: BinaryOperator = {
    "<<" => BinaryOperator::ShiftLeft,
    ">>" => BinaryOperator::ShiftRight,
}

Sum: Box<Expression<T>> = {
    Sum SumOp Product => Box::new(Expression::BinaryOperation(<>)),
    Product,
}

SumOp: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

Product: Box<Expression<T>> = {
    Product ProductOp Power => Box::new(Expression::BinaryOperation(<>)),
    Power,
}

ProductOp: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "%" => BinaryOperator::Mod,
}

Power: Box<Expression<T>> = {
    <Power> <PowOp> <Term> => Box::new(Expression::BinaryOperation(<>)),
    Unary,
}

PowOp: BinaryOperator = {
    "**" => BinaryOperator::Pow,
}

Unary: Box<Expression<T>> = {
    PrefixUnaryOp PostfixUnary => Box::new(Expression::UnaryOperation(<>)),
    PostfixUnary,
}

PrefixUnaryOp: UnaryOperator = {
    "-" => UnaryOperator::Minus,
    "!" => UnaryOperator::LogicalNot,
}

PostfixUnary: Box<Expression<T>> = {
    <t:Term> <o:PostfixUnaryOp> => Box::new(Expression::UnaryOperation(o, t)),
    Term,
}

PostfixUnaryOp: UnaryOperator = {
    "'" => UnaryOperator::Next,
}

Term: Box<Expression<T>> = {
    IndexAccess => Box::new(Expression::IndexAccess(<>)),
    FunctionCall => Box::new(Expression::FunctionCall(<>)),
    ConstantIdentifier => Box::new(Expression::Reference(NamespacedPolynomialReference::from_identifier(<>))),
    NamespacedPolynomialReference => Box::new(Expression::Reference(<>)),
    PublicIdentifier => Box::new(Expression::PublicReference(<>)),
    FieldElement => Box::new(Expression::Number(<>)),
    StringLiteral => Box::new(Expression::String(<>)),
    MatchExpression,
    IfExpression,
    "[" <items:ExpressionList> "]" => Box::new(Expression::ArrayLiteral(ArrayLiteral{items})),
    "(" <head:Expression> "," <tail:ExpressionList> ")" => { let mut list = vec![head]; list.extend(tail); Box::new(Expression::Tuple(list)) },
    "(" <BoxedExpression> ")",
    "${" <BoxedExpression> "}" => Box::new(Expression::FreeInput(<>))
}

IndexAccess: IndexAccess<T> = {
    <array:Term> "[" <index:BoxedExpression> "]" => IndexAccess{<>},
}

FunctionCall: FunctionCall<T> = {
    <function:Term> "(" <arguments:ExpressionList> ")" => FunctionCall {<>},
}

NamespacedPolynomialReference: NamespacedPolynomialReference = {
    <SymbolPath> => <>.into(),
    <namespace:Identifier> "." <name:Identifier> => SymbolPath::from_parts([namespace, name].into_iter().map(Part::Named)).into(),
}

MatchExpression: Box<Expression<T>> = {
    "match" <BoxedExpression> "{" <MatchArms> "}" => Box::new(Expression::MatchExpression(<>))
}

MatchArms: Vec<MatchArm<T>> = {
    => vec![],
    <mut list:( <MatchArm> "," )*> <end:MatchArm> ","?  => { list.push(end); list }
}

MatchArm: MatchArm<T> = {
    <pattern: MatchPattern> "=>" <value: Expression> => MatchArm{pattern, value},
}

MatchPattern: MatchPattern<T> = {
    "_" => MatchPattern::CatchAll,
    Expression => MatchPattern::Pattern(<>),
}

IfExpression: Box<Expression<T>> = {
    "if" <condition:BoxedExpression>
        "{" <body:BoxedExpression> "}"
        "else"
        "{" <else_body:BoxedExpression> "}" => Box::new(Expression::IfExpression(IfExpression{<>}))
}

// ---------------------------- Terminals -----------------------------


StringLiteral: String = {
    r#""[^"]*""# => <>[1..<>.len() - 1].to_string()
}

Identifier: String = {
    r"[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.to_string()
}

ConstantIdentifier: String = {
    // TODO it seems the lexer splits the token after %
    "%N" => <>.to_string(),
    r"%[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.to_string(),
}

PublicIdentifier: String = {
    r":[a-zA-Z_][a-zA-Z$_0-9@]*" => <>.strip_prefix(":").unwrap().to_string()

}

FieldElement: T = {
    r"[0-9][0-9_]*" => T::from_str(&<>.replace('_', "")),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => T::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap(),
}

Integer: AbstractNumberType = {
    r"[0-9][0-9_]*" => AbstractNumberType::from_str(&<>.replace('_', "")).unwrap(),
    r"0x[0-9A-Fa-f][0-9A-Fa-f_]*" => AbstractNumberType::from_str_radix(&<>[2..].replace('_', ""), 16).unwrap(),
}
